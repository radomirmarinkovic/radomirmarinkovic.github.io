/** * REST controller for managing ENTITY_NAME. */
@RestController@RequestMapping("/api")
public class ENTITY_NAMEResource {    
    private final Logger log = LoggerFactory.getLogger(ENTITY_NAMEResource.class);    @Inject    private ENTITY_NAMERepository ENTITY_NAMERepository;    /**     * POST  /naseljeno-mestos : Create a new ENTITY_NAME.     *     * @param ENTITY_NAME the ENTITY_NAME to create     * @return the ResponseEntity with status 201 (Created) and with body the new ENTITY_NAME, or with status 400 (Bad Request) if the ENTITY_NAME has already an ID     * @throws URISyntaxException if the Location URI syntax is incorrect     */    @RequestMapping(value = "/naseljeno-mestos",        method = RequestMethod.POST,        produces = MediaType.APPLICATION_JSON_VALUE)    @Timed    public ResponseEntity<ENTITY_NAME> createENTITY_NAME(@Valid @RequestBody ENTITY_NAME ENTITY_NAME) throws URISyntaxException {        log.debug("REST request to save ENTITY_NAME : {}", ENTITY_NAME);        if (ENTITY_NAME.getId() != null) {            return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert("ENTITY_NAME", "idexists", "A new ENTITY_NAME cannot already have an ID")).body(null);        }        ENTITY_NAME result = ENTITY_NAMERepository.save(ENTITY_NAME);        return ResponseEntity.created(new URI("/api/naseljeno-mestos/" + result.getId()))            .headers(HeaderUtil.createEntityCreationAlert("ENTITY_NAME", result.getId().toString()))            .body(result);    }    /**     * PUT  /naseljeno-mestos : Updates an existing ENTITY_NAME.     *     * @param ENTITY_NAME the ENTITY_NAME to update     * @return the ResponseEntity with status 200 (OK) and with body the updated ENTITY_NAME,     * or with status 400 (Bad Request) if the ENTITY_NAME is not valid,     * or with status 500 (Internal Server Error) if the ENTITY_NAME couldnt be updated     * @throws URISyntaxException if the Location URI syntax is incorrect     */    @RequestMapping(value = "/naseljeno-mestos",        method = RequestMethod.PUT,        produces = MediaType.APPLICATION_JSON_VALUE)    @Timed    public ResponseEntity<ENTITY_NAME> updateENTITY_NAME(@Valid @RequestBody ENTITY_NAME ENTITY_NAME) throws URISyntaxException {        log.debug("REST request to update ENTITY_NAME : {}", ENTITY_NAME);        if (ENTITY_NAME.getId() == null) {            return createENTITY_NAME(ENTITY_NAME);        }        ENTITY_NAME result = ENTITY_NAMERepository.save(ENTITY_NAME);        return ResponseEntity.ok()            .headers(HeaderUtil.createEntityUpdateAlert("ENTITY_NAME", ENTITY_NAME.getId().toString()))            .body(result);    }    /**     * GET  /naseljeno-mestos : get all the ENTITY_NAMEs.     *     * @return the ResponseEntity with status 200 (OK) and the list of ENTITY_NAMEs in body     */    @RequestMapping(value = "/naseljeno-mestos",        method = RequestMethod.GET,        produces = MediaType.APPLICATION_JSON_VALUE)    @Timed    public List<ENTITY_NAME> getAllENTITY_NAMEs() {        log.debug("REST request to get all ENTITY_NAMEs");        List<ENTITY_NAME> ENTITY_NAMEs = ENTITY_NAMERepository.findAll();        return ENTITY_NAMEs;    }    /**     * GET  /naseljeno-mestos/:id : get the "id" ENTITY_NAME.     *     * @param id the id of the ENTITY_NAME to retrieve     * @return the ResponseEntity with status 200 (OK) and with body the ENTITY_NAME, or with status 404 (Not Found)     */    @RequestMapping(value = "/naseljeno-mestos/{id}",        method = RequestMethod.GET,        produces = MediaType.APPLICATION_JSON_VALUE)    @Timed    public ResponseEntity<ENTITY_NAME> getENTITY_NAME(@PathVariable Long id) {        log.debug("REST request to get ENTITY_NAME : {}", id);        ENTITY_NAME ENTITY_NAME = ENTITY_NAMERepository.findOne(id);        return Optional.ofNullable(ENTITY_NAME)            .map(result -> new ResponseEntity<>(                result,                HttpStatus.OK))            .orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));    }    /**     * DELETE  /naseljeno-mestos/:id : delete the "id" ENTITY_NAME.     *     * @param id the id of the ENTITY_NAME to delete     * @return the ResponseEntity with status 200 (OK)     */    @RequestMapping(value = "/naseljeno-mestos/{id}",        method = RequestMethod.DELETE,        produces = MediaType.APPLICATION_JSON_VALUE)    @Timed    public ResponseEntity<Void> deleteENTITY_NAME(@PathVariable Long id) {        log.debug("REST request to delete ENTITY_NAME : {}", id);        ENTITY_NAMERepository.delete(id);        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert("ENTITY_NAME", id.toString())).build();    }}