TEMPLATE = "\/**\r\n * REST controller for managing ENTITY_NAME.\r\n *\/\r\n@RestController\r\n@RequestMapping(\"\/api\")\r\npublic class ENTITY_NAMEResource {\r\n\r\n    private final Logger log = LoggerFactory.getLogger(ENTITY_NAMEResource.class);\r\n\r\n    @Inject\r\n    private ENTITY_NAMERepository ENTITY_NAMERepository;\r\n\r\n    \/**\r\n     * POST  \/ENTITY_NAMEs : Create a new ENTITY_NAME.\r\n     *\r\n     * @param ENTITY_NAME the ENTITY_NAME to create\r\n     * @return the ResponseEntity with status 201 (Created) and with body the new ENTITY_NAME, or with status 400 (Bad Request) if the ENTITY_NAME has already an ID\r\n     * @throws URISyntaxException if the Location URI syntax is incorrect\r\n     *\/\r\n    @RequestMapping(value = \"\/ENTITY_NAMEs\",\r\n        method = RequestMethod.POST,\r\n        produces = MediaType.APPLICATION_JSON_VALUE)\r\n    @Timed\r\n    public ResponseEntity<ENTITY_NAME> createENTITY_NAME(@Valid @RequestBody ENTITY_NAME ENTITY_NAME) throws URISyntaxException {\r\n        log.debug(\"REST request to save ENTITY_NAME : {}\", ENTITY_NAME);\r\n        if (ENTITY_NAME.getId() != null) {\r\n            return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert(\"ENTITY_NAME\", \"idexists\", \"A new ENTITY_NAME cannot already have an ID\")).body(null);\r\n        }\r\n        ENTITY_NAME result = ENTITY_NAMERepository.save(ENTITY_NAME);\r\n        return ResponseEntity.created(new URI(\"\/api\/ENTITY_NAMEs\/\" + result.getId()))\r\n            .headers(HeaderUtil.createEntityCreationAlert(\"ENTITY_NAME\", result.getId().toString()))\r\n            .body(result);\r\n    }\r\n\r\n    \/**\r\n     * PUT  \/ENTITY_NAMEs : Updates an existing ENTITY_NAME.\r\n     *\r\n     * @param ENTITY_NAME the ENTITY_NAME to update\r\n     * @return the ResponseEntity with status 200 (OK) and with body the updated ENTITY_NAME,\r\n     * or with status 400 (Bad Request) if the ENTITY_NAME is not valid,\r\n     * or with status 500 (Internal Server Error) if the ENTITY_NAME couldnt be updated\r\n     * @throws URISyntaxException if the Location URI syntax is incorrect\r\n     *\/\r\n    @RequestMapping(value = \"\/ENTITY_NAMEs\",\r\n        method = RequestMethod.PUT,\r\n        produces = MediaType.APPLICATION_JSON_VALUE)\r\n    @Timed\r\n    public ResponseEntity<ENTITY_NAME> updateENTITY_NAME(@Valid @RequestBody ENTITY_NAME ENTITY_NAME) throws URISyntaxException {\r\n        log.debug(\"REST request to update ENTITY_NAME : {}\", ENTITY_NAME);\r\n        if (ENTITY_NAME.getId() == null) {\r\n            return createENTITY_NAME(ENTITY_NAME);\r\n        }\r\n        ENTITY_NAME result = ENTITY_NAMERepository.save(ENTITY_NAME);\r\n        return ResponseEntity.ok()\r\n            .headers(HeaderUtil.createEntityUpdateAlert(\"ENTITY_NAME\", ENTITY_NAME.getId().toString()))\r\n            .body(result);\r\n    }\r\n\r\n    \/**\r\n     * GET  \/ENTITY_NAMEs : get all the ENTITY_NAMEs.\r\n     *\r\n     * @return the ResponseEntity with status 200 (OK) and the list of ENTITY_NAMEs in body\r\n     *\/\r\n    @RequestMapping(value = \"\/ENTITY_NAMEs\",\r\n        method = RequestMethod.GET,\r\n        produces = MediaType.APPLICATION_JSON_VALUE)\r\n    @Timed\r\n    public List<ENTITY_NAME> getAllENTITY_NAMEs() {\r\n        log.debug(\"REST request to get all ENTITY_NAMEs\");\r\n        List<ENTITY_NAME> ENTITY_NAMEs = ENTITY_NAMERepository.findAll();\r\n        return ENTITY_NAMEs;\r\n    }\r\n\r\n    \/**\r\n     * GET  \/ENTITY_NAMEs\/:id : get the \"id\" ENTITY_NAME.\r\n     *\r\n     * @param id the id of the ENTITY_NAME to retrieve\r\n     * @return the ResponseEntity with status 200 (OK) and with body the ENTITY_NAME, or with status 404 (Not Found)\r\n     *\/\r\n    @RequestMapping(value = \"\/ENTITY_NAMEs\/{id}\",\r\n        method = RequestMethod.GET,\r\n        produces = MediaType.APPLICATION_JSON_VALUE)\r\n    @Timed\r\n    public ResponseEntity<ENTITY_NAME> getENTITY_NAME(@PathVariable Long id) {\r\n        log.debug(\"REST request to get ENTITY_NAME : {}\", id);\r\n        ENTITY_NAME ENTITY_NAME = ENTITY_NAMERepository.findOne(id);\r\n        return Optional.ofNullable(ENTITY_NAME)\r\n            .map(result -> new ResponseEntity<>(\r\n                result,\r\n                HttpStatus.OK))\r\n            .orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));\r\n    }\r\n\r\n    \/**\r\n     * DELETE  \/ENTITY_NAMEs\/:id : delete the \"id\" ENTITY_NAME.\r\n     *\r\n     * @param id the id of the ENTITY_NAME to delete\r\n     * @return the ResponseEntity with status 200 (OK)\r\n     *\/\r\n    @RequestMapping(value = \"\/ENTITY_NAMEs\/{id}\",\r\n        method = RequestMethod.DELETE,\r\n        produces = MediaType.APPLICATION_JSON_VALUE)\r\n    @Timed\r\n    public ResponseEntity<Void> deleteENTITY_NAME(@PathVariable Long id) {\r\n        log.debug(\"REST request to delete ENTITY_NAME : {}\", id);\r\n        ENTITY_NAMERepository.delete(id);\r\n        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(\"ENTITY_NAME\", id.toString())).build();\r\n    }\r\n\r\n}"